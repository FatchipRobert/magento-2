<?php
/**
 * PAYONE Magento 2 Connector is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PAYONE Magento 2 Connector is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with PAYONE Magento 2 Connector. If not, see <http://www.gnu.org/licenses/>.
 *
 * PHP version 5
 *
 * @category  Payone
 * @package   Payone_Magento2_Plugin
 * @author    FATCHIP GmbH <support@fatchip.de>
 * @copyright 2003 - 2017 Payone GmbH
 * @license   <http://www.gnu.org/licenses/> GNU Lesser General Public License
 * @link      http://www.payone.de
 */

/**
 * @var \Payone\Core\Block\Onepage\Amazon $block
 */
?>

<script>
    initiatedByPopup = true;
    if (window.location.hash.substring(1)) {
        initiatedByPopup = false;
    }

    <?php if (!empty($this->getOrderReferenceId())): ?>
        window.amazonOrderReferenceId = '<?php echo $this->getOrderReferenceId(); ?>';
    <?php endif; ?>

    var triggerInvalidPayments = <?php echo ($this->triggerInvalidPayment() === true ? 'true' : 'false'); ?>;

    window.onAmazonLoginReady = function() {
        amazon.Login.setClientId('<?php echo $this->getClientId(); ?>');
    };
    window.onAmazonPaymentsReady = function() {
        if (triggerInvalidPayments === true) {
            payoneInitInvalidPaymentWidgets('Read');
        } else {
            payoneInitFreshWidgets();
        }
    };
    window.onAmazonAddressSelected = function () {};
    window.onAmazonPaymentsError = function (error) {
        console.log(error.getErrorCode() + ': ' + error.getErrorMessage());
    };
    window.payoneInitFreshWidgets = function () {
        new OffAmazonPayments.Widgets.AddressBook({
            sellerId: '<?php echo $this->getSellerId(); ?>',
            scope: 'payments:billing_address payments:shipping_address payments:widget profile',
            onAddressSelect: window.onAmazonAddressSelected,
            design: {
                designMode: 'responsive'
            },
            onOrderReferenceCreate: function(orderReference) {
                orderReference.getAmazonOrderReferenceId();
            },
            onReady: window.onAmazonWidgetsInitialized,
            onError: window.onAmazonPaymentsError
        }).bind("addressBookWidgetDiv");
        walletWidget = new OffAmazonPayments.Widgets.Wallet({
            sellerId: '<?php echo $this->getSellerId(); ?>',
            scope: 'payments:billing_address payments:shipping_address payments:widget profile',
            onPaymentSelect: window.onAmazonAddressSelected,
            design: {
                designMode: 'responsive'
            },
            onError: window.onAmazonPaymentsError
        });
        walletWidget.setPresentmentCurrency("<?php echo $this->getCurrency(); ?>");
        walletWidget.bind("walletWidgetDiv");
    };
    window.payoneInitInvalidPaymentWidgets = function (addressDisplayMode) {
        document.getElementById('checkoutStepInitContent').className += " locked";
        document.getElementById('addressBookWidgetDiv').innerHTML = "";
        document.getElementById('walletWidgetDiv').innerHTML = "";
        new OffAmazonPayments.Widgets.AddressBook({
            displayMode: addressDisplayMode,
            sellerId: '<?php echo $this->getSellerId(); ?>',
            amazonOrderReferenceId: window.amazonOrderReferenceId,
            scope: 'payments:billing_address payments:shipping_address payments:widget profile',
            onAddressSelect: window.onAmazonAddressSelected,
            design: {
                designMode: 'responsive'
            },
            onReady: window.onAmazonWidgetsInitialized,
            onError: window.onAmazonPaymentsError
        }).bind('addressBookWidgetDiv').renderRequested = initiatedByPopup;
        walletWidget = new OffAmazonPayments.Widgets.Wallet({
            sellerId: '<?php echo $this->getSellerId(); ?>',
            amazonOrderReferenceId: window.amazonOrderReferenceId,
            scope: 'payments:billing_address payments:shipping_address payments:widget profile',
            onPaymentSelect: function () {
                document.getElementById('checkoutStepInitContent').className += " solved";
            },
            design: {
                designMode: 'responsive'
            },
            onError: window.onAmazonPaymentsError
        });
        walletWidget.setPresentmentCurrency("<?php echo $this->getCurrency(); ?>");
        walletWidget.bind('walletWidgetDiv').renderRequested = initiatedByPopup;
        payoneShowInitStep();
    };
    window.onAmazonWidgetsInitialized = function (orderReference) {
        var match,
            pl     = /\+/g,
            search = /([^&=]+)=?([^&]*)/g,
            decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
            query  = window.location.search.substring(1);

        while (match = search.exec(query)) {
            if (decode(match[1]) === "access_token") {
                window.addressConsentToken = decode(match[2]);
            }
        }

        if (window.amazonOrderReferenceId === undefined) {
        window.amazonOrderReferenceId = orderReference.getAmazonOrderReferenceId();
        }
    };
</script>

<ol id="checkoutSteps" style="list-style: none;padding:0;">
    <li class="section allow" onclick="window.location.href = '<?php echo $this->getCartUrl(); ?>'; return false;">
        <div class="step-title">
            <span class="number">1</span>
            <h2><?php echo __('Review shopping cart'); ?></h2>
            <a href="#"><?php echo __('View'); ?></a>
        </div>
    </li>
    <li class="section allow active" id="checkoutStepInit">
        <div class="step-title">
            <span class="number">2</span>
            <h2><?php echo __('Shipping address & payment'); ?></h2>
            <a href="#" onclick="payoneShowInitStep()"><?php echo __('Edit'); ?></a>
        </div>
        <div class="step" id="checkoutStepInitContent">
            <div>
                <label id="amazonWidgetsNotice">
                    <?php echo __('Notice: Please verify your payment information or choose another method.') ?>
                    <span></span>
                </label>
            </div>
            <div id="addressBookWidgetWrap">
                <div id="addressBookWidgetCover"></div>
                <div id="addressBookWidgetDiv"></div>
            </div>
            <div id="walletWidgetWrap">
                <div id="walletWidgetCover"></div>
                <div id="walletWidgetDiv"></div>
            </div>
            <div style="clear:both;"></div>

            <br>
            <a href="#" class="action create primary" onclick="payoneConfirmSelection();return false;">
                <span>Fortfahren</span>
            </a>
        </div>
    </li>
    <li class="section allow active" id="checkoutStepFinish">
        <div class="step-title">
            <span class="number">3</span>
            <h2><?php echo __('Shipping method & summary'); ?></h2>
            <a href="#"><?php echo __('Edit'); ?></a>
        </div>
        <div class="step">
            <div class="paypal-review view">
                <div id="checkoutStepFinishContent"></div>
                <div id="checkoutStepFinishForm" style="display:none;">
                    <!--form method="post" id="order-review-form" action="<?php echo $block->escapeUrl($block->getPlaceOrderUrl()); ?>" class="form order-review-form" -->
                        <?php echo $block->getChildHtml('agreements'); ?>
                        <div class="actions-toolbar" id="review-buttons-container">
                            <div class="primary">
                                <input type="submit" id="review-button" onclick="payonePlaceOrder();return false;" class="action checkout primary" value="<?php echo $block->escapeHtml(__('Place Order')); ?>">
                            </div>
                            <span class="please-wait load indicator" id="review-please-wait" style="display: none;"
                                  data-text="<?php echo $block->escapeHtml(__('Submitting order information...')); ?>">
                                <span><?php echo $block->escapeHtml(__('Submitting order information...')); ?></span>
                            </span>
                        </div>
                    <!--/form-->
                </div>
            </div>
        </div>
    </li>
</ol>

<script src="<?php echo $this->getWidgetUrl(); ?>" async="async"></script>
<script>
    require(['jquery', 'Magento_Ui/js/model/messageList'], function($, messageList){
        window.payoneConfirmSelection = function() {
            $.ajax({
                url: '<?php echo $this->getLoadReviewUrl(); ?>',
                type: 'POST',
                dataType: 'html',
                data: {
                    action: 'confirmSelection',
                    amazonReferenceId: window.amazonOrderReferenceId,
                    amazonAddressToken: window.addressConsentToken
                },
                showLoader: true,
                complete: function(responseRaw) {
                    if (payoneUpdateContent(responseRaw) === true) {
                        $('#checkoutStepInit').removeClass('active');
                        $('#checkoutStepFinish').addClass('allow active');
                        $('#checkoutStepFinishForm').show();
                    }
                },
                error: function (xhr, status, errorThrown) {
                    alert('An error occured. ' + status);
                }
            });
        };
        window.payonePlaceOrder = function () {
            event.preventDefault();
            OffAmazonPayments.initConfirmationFlow('<?php echo $this->getSellerId(); ?>', window.amazonOrderReferenceId, function(confirmationFlow) {
                window.payoneConfirmOrderReference(confirmationFlow);
            });
        };
        window.payoneConfirmOrderReference = function (confirmationFlow) {
            $.ajax({
                url: '<?php echo $this->getLoadReviewUrl(); ?>',
                type: 'POST',
                dataType: 'html',
                data: {
                    action: 'confirmOrderReference'
                },
                showLoader: true,
                complete: function (responseRaw) {
                    var oResponse = JSON.parse(responseRaw.responseText);
                    if (oResponse.request !== undefined && oResponse.request == 'confirmOrderReference') {
                        if (oResponse.success === true) {
                            //amazon.Login.logout(); // logout cannot happen here because InvalidPaymentMethod will be thrown AFTER this
                            confirmationFlow.success();
                        } else if (oResponse.errorcode == '981' || oResponse.errorcode == '985') {
                            var addressDisplayMode = 'Read';
                            if (oResponse.errorcode == '985') {
                                addressDisplayMode = 'Edit';
                            }
                            payoneInitInvalidPaymentWidgets(addressDisplayMode);
                            payoneUpdateContent(responseRaw);
                            payoneShowInitStep();
                        } else {
                            amazon.Login.logout();
                            confirmationFlow.error();
                            window.location.href = '<?php echo $this->getErrorUrl(); ?>';
                        }
                    }
                },
                error: function (responseRaw) {
                    if (oResponse.errorcode == '985') {
                        payoneInitInvalidPaymentWidgets('Edit');
                    } else {
                    amazon.Login.logout();
                    var oResponse = JSON.parse(responseRaw.responseText);
                    if (oResponse.request !== undefined && oResponse.request == 'confirmOrderReference') {
                        confirmationFlow.error();
                        window.location.href = '<?php echo $this->getErrorUrl(); ?>';
                    }
                    }
                },
                timeout: "30000" //specify your timeout value (for example, 3000)
            });
        };
        window.payonePlaceOrderFinal = function() {
            $.ajax({
                url: '<?php echo $this->getLoadReviewUrl(); ?>',
                type: 'POST',
                dataType: 'html',
                data: {
                    action: 'placeOrder'
                },
                showLoader: true,
                complete: function(responseRaw) {
                    if (responseRaw.responseText.length !== 0) {
                        var oResponse = JSON.parse(responseRaw.responseText);
                        if (oResponse.success === true && oResponse.successUrl !== undefined) {
                            amazon.Login.logout();
                            window.location = oResponse.successUrl;
                            return true;
                        } else if(oResponse.errorUrl !== undefined) {
                            window.location = oResponse.errorUrl;
                            return true;
                        } else if(oResponse.errorMessage !== undefined) {
                            if (oResponse.errorMessage === 'PaymentMethodNotAllowed' || oResponse.errorMessage === 'InvalidPaymentMethod') {
                                var addressDisplayMode = 'Read';
                                if (oResponse.errorMessage === 'PaymentMethodNotAllowed') {
                                    addressDisplayMode = 'Edit';
                                }
                                payoneInitInvalidPaymentWidgets(addressDisplayMode);
                            }
                        }
                    }
                },
                error: function (xhr, status, errorThrown) {
                    alert('An error occured. ' + status);
                }
            });
        };
        window.payoneUpdateContent = function(response) {
            if (response.responseText.length !== 0) {
                var oResponse = JSON.parse(response.responseText);
                if (oResponse.html !== undefined) {
                    $('#checkoutStepFinishContent').html(oResponse.html);
                    return true;
                }
            }
            return false;
        };
        window.payoneShowInitStep = function() {
            $('#checkoutStepFinish').removeClass('active');
            $('#checkoutStepInit').addClass('allow active');
        };
        window.payoneUpdateShippingCosts = function() {
            $.ajax({
                url: '<?php echo $this->getLoadReviewUrl(); ?>',
                type: 'POST',
                dataType: 'html',
                data: {
                    action: 'updateShipping',
                    shippingMethod: $('#shipping-method').val()
                },
                showLoader: true,
                complete: function(responseRaw) {
                    payoneUpdateContent(responseRaw);
                },
                error: function (xhr, status, errorThrown) {
                    alert('An error occured. ' + status);
                }
            });
        };
        window.payoneUpdateCoupon = function(iRemove) {
            var couponCode = $('#coupon_code').val();
            if (couponCode.length > 0) {
                $.ajax({
                    url: '<?php echo $this->getLoadReviewUrl(); ?>',
                    type: 'POST',
                    dataType: 'html',
                    data: {
                        action: 'updateCoupon',
                        couponCode: couponCode,
                        remove: iRemove
                    },
                    showLoader: true,
                    complete: function (responseRaw) {
                        payoneUpdateContent(responseRaw);
                    },
                    error: function (xhr, status, errorThrown) {
                        alert('An error occured. ' + status);
                    }
                });
            }
        };
        window.toggleCouponBlock = function() {
            if ($('#block-discount').hasClass('active')) {
                $('#block-discount').removeClass('active')
            } else {
                $('#block-discount').addClass('active')
            }
            return false;
        };
    });
</script>